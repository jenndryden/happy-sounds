[{"/Users/jenndryden/Documents/code/happy-sounds/happy-sounds/src/index.js":"1","/Users/jenndryden/Documents/code/happy-sounds/happy-sounds/src/App.js":"2"},{"size":218,"mtime":1689117085048,"results":"3","hashOfConfig":"4"},{"size":4544,"mtime":1689125986225,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oyt3r",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/jenndryden/Documents/code/happy-sounds/happy-sounds/src/index.js",[],[],"/Users/jenndryden/Documents/code/happy-sounds/happy-sounds/src/App.js",["13","14"],[],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './logo.png';\nimport logomobile from './logomobile.png';\nimport name from './jenn.png';\nimport rain from './rain.mp3';\nimport brownnoise from './brownnoise.mp3';\nimport leaves from './leaves.mp3';\nimport laughter from './laughter.mp3';\nimport waves from './waves.mp3';\nimport bonfire from './bonfire.mp3';\nimport AudioPlayer from 'react-audio-player';\nimport rainlogo from './audionames/rain.png';\nimport laughterlogo from './audionames/laughter.png';\nimport leaveslogo from './audionames/leaves.png';\nimport waveslogo from './audionames/waves.png';\nimport brownnoiselogo from './audionames/brownnoise.png';\nimport bonfirelogo from './audionames/bonfire.png';\n\nconst sliderStyle = {\n  WebkitAppearance: 'none',\n  background: 'white',\n  height:'10px',\n  width: '90%',\n  maxWidth: '500px',\n  outline: 'none',\n  borderRadius: '25px',\n  opacity: '0.9',\n};\n\nconst AudioSliderApp = () => {\n  const [volumes, setVolumes] = useState({});\n  const [audioFiles, setAudioFiles] = useState([\n    { id: 1, volume: 0, src: rain, imgSrc: rainlogo },\n    { id: 2, volume: 0, src: brownnoise, imgSrc: brownnoiselogo },\n    { id: 3, volume: 0, src: laughter, imgSrc: laughterlogo},\n    { id: 4, volume: 0, src: waves, imgSrc: waveslogo },\n    { id: 5, volume: 0, src: bonfire, imgSrc: bonfirelogo },\n    { id: 6, volume: 0, src: leaves, imgSrc: leaveslogo },\n  ]);\n\n  const handleSliderChange = (id, volume) => {\n    setAudioFiles((prevAudioFiles) =>\n      prevAudioFiles.map((audioFile) =>\n      audioFile.id === id ? { ...audioFile, volume } : audioFile\n      )\n    );\n    setVolumes((prevVolumes) => ({\n      ...prevVolumes,\n      [id]: volume\n    }));\n  };\n\n  const [sliderValue, setSliderValue] = useState(0);\n  const [isStarted, setIsStarted] = useState(false);\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1200);\n\nconst startAudio = () => {\n    setIsStarted(true);\n};\n\nuseEffect(() => {\n  const handleResize = () => {\n    setIsMobile(window.innerWidth <= 1200);\n  };\n  window.addEventListener('resize', handleResize);\n  return () => {\n    window.removeEventListener('resize', handleResize);\n  };\n}, []);\n\n\n  return (\n    <div className=\"container\">\n      <img src={isMobile ? logomobile : logo} alt=\"Logo\" className=\"logo\" />\n      <div className=\"jenn-logo\" onClick={() => window.open(\"http://www.jenndryden.com\", \"_blank\")}></div>\n      <div className={`circle ${isMobile ? 'mobile' : ''}`}>\n      {!isStarted && <div className=\"sprite-button\" onClick={startAudio}>\n  </div>}\n  {isStarted && audioFiles.map((audioFile, index) => {\n  let positionX = 0;\n  let positionY = 0;\n\n  if (isMobile) {\n    // Stack sliders vertically in the mobile view\n    positionY = index * 100; // Change this as per your design\n  } else {\n    // Arrange sliders in a circle in the desktop view\n    const angle = (index * 360) / audioFiles.length;\n    if (index === 0 || index === 5 || index === 1) {\n      positionX = 200 * Math.cos((angle * Math.PI) / 180) + 250;\n      positionY = 150 * Math.sin((angle * Math.PI) / 180);\n    } else {\n      positionX = 200 * Math.cos((angle * Math.PI) / 180) - 250;\n      positionY = 150 * Math.sin((angle * Math.PI) / 180);\n    }\n  }\n\n  const transform = `translate(${positionX}px, ${positionY}px)`;\n            const volume = volumes[audioFile.id] || 0;\n          \n            return (\n              <div key={audioFile.id} className=\"slider\" style={{ transform }}>\n                <img src={audioFile.imgSrc} alt={audioFile.imgSrc} className=\"audiologo\" />\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={volume}\n                  onChange={(e) => handleSliderChange(audioFile.id, e.target.value)}\n                  onInput={(e) => {\n                    const value = Number(e.target.value) / 100;\n                    e.target.style.setProperty('--thumb-rotate', `${value * 720}deg`);\n                    setSliderValue(Math.round(value * 50));\n                  }}\n                  className=\"input-thumb\"\n                  style={sliderStyle} \n                />\n                <br />\n                \n                <AudioPlayer\n                  src={audioFile.src}\n                  volume={volume / 100}\n                  autoPlay\n                  loop={true}\n                  controls={false}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n};\n\nexport default AudioSliderApp;\n",{"ruleId":"15","severity":1,"message":"16","line":5,"column":8,"nodeType":"17","messageId":"18","endLine":5,"endColumn":12},{"ruleId":"15","severity":1,"message":"19","line":54,"column":10,"nodeType":"17","messageId":"18","endLine":54,"endColumn":21},"no-unused-vars","'name' is defined but never used.","Identifier","unusedVar","'sliderValue' is assigned a value but never used."]